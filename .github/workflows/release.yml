name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install curl unzip 7zip

      - name: Install dependencies (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install curl unzip p7zip

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './client/src-tauri -> target'

      - name: Download and extract fingerprint browser
        run: |
          echo "Starting browser download..."
          node client/scripts/download-browser-gha.cjs
          echo "Browser download completed. Checking for files:"
          echo "Contents of current directory:"
          ls

      - name: Install frontend dependencies
        run: pnpm install
        working-directory: ./client

      - name: Build frontend
        run: |
          echo "Starting frontend build..."
          pnpm build
          echo "Frontend build completed. Checking dist directory:"
          ls dist/
        working-directory: ./client

      - name: Install backend dependencies
        run: pnpm install
        working-directory: ./server

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./client
          tagName: ${{ github.ref_name }}
          releaseName: "Nyx Crawler Bot v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          includeDebug: false
          includeRelease: true
          
      - name: Debug Tauri build results
        run: |
          echo "=== Tauri Build Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Client directory contents:"
          if ($env:RUNNER_OS -eq "Windows") {
            dir client/
          } else {
            ls -la client/
          }
          echo "Tauri src directory contents:"
          if ($env:RUNNER_OS -eq "Windows") {
            dir client/src-tauri/
          } else {
            ls -la client/src-tauri/
          }
          echo "Target directory contents:"
          if ($env:RUNNER_OS -eq "Windows") {
            dir client/src-tauri/target/ 2>nul
            if (!$?) { echo "Target directory not found" }
          } else {
            ls -la client/src-tauri/target/ 2>/dev/null || echo "Target directory not found"
          }
          echo "Release directory contents:"
          if ($env:RUNNER_OS -eq "Windows") {
            dir client/src-tauri/target/release/ 2>nul
            if (!$?) { echo "Release directory not found" }
          } else {
            ls -la client/src-tauri/target/release/ 2>/dev/null || echo "Release directory not found"
          }
          echo "Bundle directory contents:"
          if ($env:RUNNER_OS -eq "Windows") {
            dir client/src-tauri/target/release/bundle/ 2>nul
            if (!$?) { echo "Bundle directory not found" }
          } else {
            ls -la client/src-tauri/target/release/bundle/ 2>/dev/null || echo "Bundle directory not found"
          }